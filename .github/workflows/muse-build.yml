# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events
  push:
    branches: [ "muse" ]
  pull_request:
    branches: [ "muse" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-12 #macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # inspired from `https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development`
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          PP_PATH=$RUNNER_TEMP/provisioning_profile.developerprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          # echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # download directly instead b/c it's too big for secrets. 
          curl --silent --output-dir $RUNNER_TEMP -O http://db.musecore.net/tmp/provisioning_profile.developerprofile

          ls -la $RUNNER_TEMP

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          # setup codesign (https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions)
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -k $KEYCHAIN_PATH -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH


      - name: Run xcodebuild (Muse Audio Share)
        run: |
          # Setting `kHas_Driver_Name_Format=false` ensures that the device UID is "MuseAudioShare_UID"
          # (see source at BlackHole.h). The device UID must be "MuseAudioShare_UID" because the app
          # uses the uid to identify the device.
          xcodebuild -project BlackHole.xcodeproj \
            -configuration Release \
            -target BlackHole \
            CONFIGURATION_BUILD_DIR=build \
            CODE_SIGN_STYLE="Manual" \
            PRODUCT_BUNDLE_IDENTIFIER=co.musesessions.audiodrivers.darwin.museaudioshare \
            DEVELOPMENT_TEAM=P99CTB3BP8 \
            CODE_SIGN_IDENTITY='Developer ID Application: Muse App LLC (P99CTB3BP8)' \
            GCC_PREPROCESSOR_DEFINITIONS='$GCC_PREPROCESSOR_DEFINITIONS kNumber_Of_Channels=2 kPlugIn_BundleID=\"co.musesessions.audiodrivers.darwin.museaudioshare\" kDriver_Name=\"MuseAudioShare\" kDevice_Name=\"Muse\ Audio\ Share\" kEnableVolumeControl=false kHas_Driver_Name_Format=false'

          cd ./build

          TAG=`plutil -extract CFBundleShortVersionString raw ./BlackHole.driver/Contents/Info.plist`
          echo "TAG=$TAG"
          
          mv BlackHole.driver ./MuseAudioShare.driver
          /usr/bin/codesign -s 'Developer ID Application: Muse App LLC (P99CTB3BP8)' --timestamp -f \
            --options=runtime ./MuseAudioShare.driver
          tar -cvzf MuseAudioShare.driver.tar.gz ./MuseAudioShare.driver
          cp MuseAudioShare.driver.tar.gz "MuseAudioShare-$TAG.driver.tar.gz"

          # remove artefacts
          rm -r BlackHole*

          ls -lah

      - name: Run xcodebuild (Muse DAW Bridge)
        run: |

          xcodebuild -project BlackHole.xcodeproj \
            -configuration Release \
            -target BlackHole \
            CONFIGURATION_BUILD_DIR=build \
            CODE_SIGN_STYLE="Manual" \
            PRODUCT_BUNDLE_IDENTIFIER=co.musesessions.audiodrivers.darwin.musedawbridge \
            DEVELOPMENT_TEAM=P99CTB3BP8 \
            CODE_SIGN_IDENTITY='Developer ID Application: Muse App LLC (P99CTB3BP8)' \
            GCC_PREPROCESSOR_DEFINITIONS='$GCC_PREPROCESSOR_DEFINITIONS kNumber_Of_Channels=2 kPlugIn_BundleID=\"co.musesessions.audiodrivers.darwin.musedawbridge\" kDriver_Name=\"MuseDAWBridge\" kDevice_Name=\"Muse\ DAW\ Bridge\" kEnableVolumeControl=false kHas_Driver_Name_Format=false'

          cd ./build

          TAG=`plutil -extract CFBundleShortVersionString raw ./BlackHole.driver/Contents/Info.plist`
          echo "TAG=$TAG"

          mv BlackHole.driver ./MuseDAWBridge.driver
          /usr/bin/codesign -s 'Developer ID Application: Muse App LLC (P99CTB3BP8)' --timestamp -f \
             --options=runtime ./MuseDAWBridge.driver
          tar -cvzf MuseDAWBridge.driver.tar.gz MuseDAWBridge.driver
          cp MuseDAWBridge.driver.tar.gz "MuseDAWBridge-$TAG.driver.tar.gz"

          # remove artefacts
          rm -r BlackHole*

          ls -lah

      - name: Run xcodebuild (Muse Recording)
        run: |
          xcodebuild -project BlackHole.xcodeproj \
            -configuration Release \
            -target BlackHole \
            CONFIGURATION_BUILD_DIR=build \
            CODE_SIGN_STYLE="Manual" \
            PRODUCT_BUNDLE_IDENTIFIER=co.musesessions.audiodrivers.darwin.muserecording \
            DEVELOPMENT_TEAM=P99CTB3BP8 \
            CODE_SIGN_IDENTITY='Developer ID Application: Muse App LLC (P99CTB3BP8)' \
            GCC_PREPROCESSOR_DEFINITIONS='$GCC_PREPROCESSOR_DEFINITIONS kNumber_Of_Channels=2 kPlugIn_BundleID=\"co.musesessions.audiodrivers.darwin.muserecording\" kDriver_Name=\"MuseRecording\" kDevice_Name=\"Muse\ Recording\" kEnableVolumeControl=false kHas_Driver_Name_Format=false'

          cd ./build

          TAG=`plutil -extract CFBundleShortVersionString raw ./BlackHole.driver/Contents/Info.plist`
          echo "TAG=$TAG"

          mv BlackHole.driver ./MuseRecording.driver
          /usr/bin/codesign -s 'Developer ID Application: Muse App LLC (P99CTB3BP8)' --timestamp -f \
            --options=runtime ./MuseRecording.driver
          tar -cvzf MuseRecording.driver.tar.gz MuseRecording.driver
          cp MuseRecording.driver.tar.gz "MuseRecording-$TAG.driver.tar.gz"

          # remove artefacts
          rm -r BlackHole*

          ls -lah

      - name: Set up S3cmd cli tool
        uses: s3-actions/s3cmd@v1.2.0
        with:
          provider: digitalocean
          region: 'sfo3'
          access_key: ${{ secrets.S3_ACCESS_KEY }}
          secret_key: ${{ secrets.S3_SECRET_KEY }}

      - name: Upload the artefacts to musecdn
        run: |
          s3cmd put ./build/Muse*.driver.tar.gz --acl-public s3://musecdn/muse-app/accessories/darwin-x64/

